<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">


    <!--1.声明，注册springmvc的中央调度器DispatcherServlet
       需要在tomcat服务器启动后，创建DispatcherServle对象的实例。
       因为DispatcherServlet在创建的过程中，会同时创建springmvc容器对象，读取springmvc的配置文件，把这个配置文件
       中的对象都创建好，当用户发起请求时，就可以直接使用对象了。
    -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--spring创建对象时，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml
      所以我们加下面这个就可以改变读取这个文件的位置,init—param标签要放到load-on-startup上面
      -->
        <init-param>
            <!--springmvc的配置文件的位置属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>


        <!--在tomcat启动后，创建servlet对象
        load-on-startup:表示在tomcat启动后创建对象的顺序。它的值是个整数，数值越小，tomcat创建对象越少，大于0的整数
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!--
            使用框架的时候，url-pattern可以使用两种值
            1.使用扩展名方式，语法 *.xxxx，xxx是自定义的扩展名，常用方式如：*.do，*.action,*.mvc等等
               如果你的请求以上面这些扩展名结尾，则都交给这个servlet处理

            2.使用斜杠"/"
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--2.注册spring的监听器-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value><!--指定文件位置-->
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>




    <!--3.声明过滤器，解决post请求乱码问题，不是响应-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--设置项目中使用的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <!--强制请求对象(HttpServletRequest)使用encoding编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制请求对象(HttpServletResponse)使用encoding编码的值-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>



    <!--欢迎页面-->
    <welcome-file-list>
        <welcome-file>/WEB-INF/jsp/login.jsp</welcome-file>
    </welcome-file-list>
</web-app>